Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false

  // 1st approach
class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();
        for(int i=0; i < s.length(); i++){
            char c = s.charAt(i);

            if (c == '(' || c == '{' || c == '['){
                st.push(c);
                continue;
            }
            if(st.size() == 0)
                return false;

            char c2 = st.pop();
            switch(c){
                case')': 
                if(c2 != '(')
                    return false; 
                    break;
                case'}': 
                if(c2 != '{')
                    return false; 
                    break;
                case']': 
                if(c2 != '[')
                    return false; 
                    break;
            }
        }
        if(st.size() == 0)
             return true;
        return false;
    }
}

// 2nd approach
// class Solution{
// public boolean isValid(String s) {
// 	Stack<Character> stack = new Stack<Character>();
// 	for (char c : s.toCharArray()) {
// 		if (c == '(')
// 			stack.push(')');
// 		else if (c == '{')
// 			stack.push('}');
// 		else if (c == '[')
// 			stack.push(']');
// 		else if (stack.isEmpty() || stack.pop() != c)
// 			return false;
// 	}
// 	return stack.isEmpty();
// }
// }
