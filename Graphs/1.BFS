Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2



import java.util.*;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
 
public class Solution {
 
	public static void BFS(ArrayList<ArrayList<Integer>> graph, int v) {
 
        boolean visited[] = new boolean[v];
 
        Queue<Integer> qu = new LinkedList<>();
 
        for (int i = 0; i < visited.length; i++) {
 
            if (visited[i] == false) {
 
                qu.add(i);
 
                while (!qu.isEmpty()) {
 
                    int front = qu.poll();
                    visited[front] = true;
 
                    System.out.print(front + " ");
 
                    for (int it : graph.get(front)) {
 
                        if (visited[it] == false) {
 
                            qu.add(it);
                            visited[it] = true;
                        }
                    }
                }
            }
        }
    }
	public static void main(String[] args) throws NumberFormatException, IOException {
 
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
 
        Scanner sc = new Scanner(System.in);
 
        int v = sc.nextInt();
        int e = sc.nextInt();
 
 
        for (int i = 0; i < v; i++)
            graph.add(new ArrayList<>());
 
 
        for (int i = 1 ; i <= e; i++) {
 
            int n1 = sc.nextInt();
            int n2 = sc.nextInt();
 
            graph.get(n1).add(n2);
            graph.get(n2).add(n1);
        }
 
		for (int i = 0; i < v; i++)
			Collections.sort(graph.get(i));
 
 
        BFS(graph, v);
	}
 
}
